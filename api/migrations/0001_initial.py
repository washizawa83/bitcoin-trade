# Generated by Django 4.2.7 on 2023-11-25 13:23

import api.models.auth
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Candle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(unique=True)),
                ('open', models.FloatField()),
                ('high', models.FloatField()),
                ('low', models.FloatField()),
                ('close', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveIntegerField(choices=[(1, '10S'), (2, '1M'), (3, '5M'), (4, '10M'), (5, '15M'), (6, '1H'), (7, '4H')])),
                ('sma_duration', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(240)])),
                ('parabolic_sar_step', models.FloatField(default=0.02)),
                ('parabolic_sar_maximum', models.FloatField(default=0.2)),
            ],
        ),
        migrations.CreateModel(
            name='Sma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('candle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.candle')),
            ],
        ),
        migrations.CreateModel(
            name='ParabolicSAR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('is_up_trend', models.BooleanField()),
                ('updated_price', models.FloatField()),
                ('current_step', models.FloatField()),
                ('candle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.candle')),
            ],
        ),
        migrations.CreateModel(
            name='MaxMin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('candle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.candle')),
            ],
        ),
        migrations.CreateModel(
            name='Auth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Auth',
                'verbose_name_plural': 'Auth',
            },
            managers=[
                ('objects', api.models.auth.AuthManager()),
            ],
        ),
    ]
